// model 単数
// relastion　単数 or 複数

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String    @id @default(uuid())
  name                 String
  email                String    @unique
  password             String
  image                String?   @db.VarChar(300)
  role                 Role      @default(USER)
  active               Boolean   @default(true)
  profile              Profile?
  posts                Post[]
  comments             Comment[]
  likes                Like[]
  resetToken           String?
  resetTokenExpiration BigInt?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime? @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Profile {
  id     String @id @default(uuid())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Post {
  id           String    @id @default(uuid())
  title        String    @db.VarChar(50)
  content      String    @db.VarChar(255)
  reward       Int
  published    Boolean   @default(true) // 公開・非公開
  draft        Boolean   @default(false) // 下書き
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  category     Category  @relation(fields: [categorySlug], references: [slug], onDelete: Cascade)
  categorySlug String
  comments     Comment[]
  likes        Like[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@index([userId])
  @@index([categorySlug])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  posts     Post[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([userId])
  @@index([postId])
}

model Like {
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}
