// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String    @id @default(uuid())
  name                 String?
  email                String?   @unique
  password             String?
  posts                Post[]
  comments             Comment[]
  emailVerified        DateTime? @map(name: "email_verified") //使ってない
  image                String?   @db.VarChar(300)
  createdAt            DateTime  @default(now()) @map(name: "created_at")
  updatedAt            DateTime? @updatedAt
  profile              String?
  Like                 Like[]
  twitter              String?
  facebook             String?
  active               Boolean   @default(true)
  role                 String?
  account              Account[]
  resetToken           String?
  resetTokenExpiration BigInt?
}

model Account {
  id                 String    @id @default(uuid())
  compoundId         String    @unique
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")
  user               User      @relation(fields: [userId], references: [id])
}

model Post {
  id         String        @id @default(uuid())
  title      String        @db.VarChar(50)
  content    String        @db.VarChar(255)
  reward     Int?
  rewardFree Boolean       @default(true)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime?     @updatedAt
  published  Boolean       @default(true)
  draft      Boolean       @default(false)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  tags       TagsOnPosts[]
  comment    Comment[]
  Category   Category?     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  Like       Like[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String?   @unique
  posts     Post[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Like {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Tag {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  posts     TagsOnPosts[]
  createdAt DateTime      @default(now())
  updatedAt DateTime?     @updatedAt
}

model TagsOnPosts {
  id        Int       @id @default(autoincrement())
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  postId    String
  tagId     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Event {
  id           Int       @id @default(autoincrement())
  title        String?   @unique
  subTitle     String?
  formTitle    String?
  formSubTitle String?
  description  String?
  comment      String?
  color        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}
